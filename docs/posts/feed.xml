<?xml version="1.0" encoding="utf-8"?><rss xmlns:a="http://www.w3.org/2005/Atom" version="2.0"><channel><title>mi Blog | iyaki</title><description>Blog personal donde comparto mis experiencias y pensamientos</description><link>https://iyaki.ar/blog/</link><language>es</language><a:link href="https://iyaki.ar/posts/feed.xml" rel="self" type="application/rss+xml"/><image><url>https://iyaki.ar/blog/logo.png</url><title>mi Blog | iyaki</title><link>https://iyaki.ar/blog/</link></image><item><title><![CDATA[Llegaron las newsletters]]></title><description><![CDATA[
					<blockquote>Introducing Simple Newsletter! Atom/RSS to Newsletter Service</blockquote>
					<article>
	<h1>Llegaron las <span lang="en">Newsletters</span></h1>
<p>Durante el último mes estuve trabajando en desarrollar una pequeña aplicación web que he bautizado como: <a href="https://simple-newsletter.com/" target="_blank" lang="en">Simple Newsletter</a>.</p>
<p><span lang="en">Simple Newsletter</span> es un servicio fuertemente inspirado en <a href="https://kill-the-newsletter.com/" target="_blank" lang="en">Kill the Newsletter</a> (del que ya les hablé en <a href="https://iyaki.ar/"posts/20230514_reuniendo_conocimiento/">este artículo</a>), pero que hace exactamente lo contrario. Permite subscribirse con una dirección <span lang="en">e-mail</span> a un <span lang="en">Feed</span> <span lang="en">Atom</span> o <abbr title="Really Simple Sindication" lang="en">RSS</abbr> y recibir las actualizaciones de dicho <span lang="en">feed</span> en tu casilla de correo mediante una <em>newsletter</em>.</p>
<p>En lo personal, considero que la practicidad de un buen gestor de <span lang="en">Feeds</span> supera ampliamente en comodidad de uso a una <span lang="en">Newsletter</span>, pero viendo como este medio de comunicación ha crecido en los últimos tiempos, me pareció que un servicio así podría llegar a ser útil.</p>
<p>Por ahora, la única manera de utilizar el servicio de <span lang="en">Simple Newsletter</span> es mediante su <abbr title="Application Programming Interface">API</abbr> web, pero mi intención es poder seguir mejorando el servicio y, entre otras cosas, agregar una página de inicio que permita a cualquiera subscribirse al <span lang="en">feed</span> que desee sin tener que estar escribiendo parámetros en la <i lang="en">query string</i> manualmente.</p>
<p>Si bien es un servicio pensado para ser utilizado por usuarios particulares y que cualquiera pueda recibir actualizaciones de los blogs y páginas que le interesan vía correo electrónico, <span lang="en">Simple Newsletter</span> también puede ser aprovechado por cualquiera que tenga un blog o página web con un <span lang="en">feed</span> <span lang="en">Atom</span> o <abbr title="Really Simple Sindication" lang="en">RSS</abbr> para mantener a sus lectores informados y en contacto agregando un simple formulario (tal y como está funcionando ahora mismo en este blog).</p>
<p>Cómo siempre, espero su <span lang="en">feedback</span> al respecto, se trata de un proyecto en muy temprana edad y cualquier sugerencia es más que bienvenida.</p>
<p>Hasta la próxima.</p>

</article>

				]]></description><pubDate>Thu, 02 May 2024 00:23:31 +0000</pubDate><link>https://iyaki.ar/posts/20240501_llegaron_las_newsletters/</link><guid isPermaLink="true">https://iyaki.ar/posts/20240501_llegaron_las_newsletters/</guid></item><item><title><![CDATA[No solo de software vive el hombre]]></title><description><![CDATA[
					<blockquote>En artículos anteriores hablamos sobre software que ayuda a la productividad. Hoy es el turno de esas leyes y principios que, si decidimos tener en cuenta también pueden ayudarnos enormemente.</blockquote>
					<article>
<h1>No solo de software vive el hombre</h1>
<p>Usar las herramientas adecuadas para el trabajo adecuado, saber utilizarlas y darles el mantenimiento necesario para que sigan funcionando son formas importantes de aumentar nuestra productividad. Pero existe algo con un impacto mucho más profundo y de mayor magnitud: Tomar las decisiones que más nos acercarán a nuestros resultados deseados. Porque uno puede ser extremadamente rápido para construir un auto, pero si lo que se necesitaba era un barco, de poco servirá todo el esfuerzo que se invierta.</p>
<p>En este aspecto hay dos puntos elementales que nos ayudarán a alcanzar el mayor impacto posible mediante nuestro trabajo.</p>
<p>El primero es conocer cuál es el resultado deseado, en este sentido, por lo general, cuanto más contexto e información tengamos sobre el problema que buscamos solucionar, mejor preparados estaremos para brindar una solución.</p>
<p>El segundo aspecto relevante es poder predecir, de la manera más acertada posible, las consecuencias de nuestras acciones. Para esto podemos optar por opciones poco ortodoxas como el tarot, la bola de cristal o la lectura de la borra del café; o centrarnos en aprovechar lo que otros han estudiado al respecto en el pasado y sus conclusiones. Conclusiones que en muchos casos se han recopilado en leyes, teorías y principios ampliamente conocidos en el ámbito de la gestión y la tecnología.</p>
<p>En este artículo nos centraremos en estas últimas.</p>
<p>Por eso hoy, dejo un breve resumen de las que considero más útiles a la hora de avanzar sobre un proyecto como colaborador individual o como parte de su <span lang="en">management</span>.</p>
<h2 id="pareto"><a href="#pareto">Principio de Pareto o Regla del 80/20</a></h2>
<p>Durante el siglo XIX el economista italiano Vilfredo Pareto observó que <b>aproximadamente el 80% de los efectos proviene del 20% de las causas</b>.</p>
<p>En el contexto de proyectos de software, este principio cobra una relevancia significativa. Al aplicarlo, nos damos cuenta de que el 80% del valor agregado proviene del 20% de las características o funcionalidades implementadas.</p>
<p>Y entonces, ¿por qué esto es tan relevante para nosotros?</p>
<p>Porque nos ayuda a priorizar.</p>
<p>Si sabemos qué pequeña parte de nuestro trabajo es responsable de la mayoría de los resultados, podemos concentrarnos en eso primero.</p>
<p>Ya sea que estemos trabajando en solitario o en equipo, el Principio de Pareto nos da una hoja de ruta inteligente para maximizar nuestra eficiencia y lograr mejores resultados.</p>
<h2 id="carga-cognitiva"><a href="#carga-cognitiva">Carga cognitiva</a></h2>
<p>La carga cognitiva no es un principio como tal, pero sí un concepto que, si tenemos en cuenta, puede ayudarnos a nosotros y a nuestros compañeros a obtener mejores resultados.</p>
<p>La carga cognitiva <b>se refiere a la cantidad de esfuerzo mental requerido para realizar una tarea o procesar información</b>.</p>
<p>Imaginemos que estamos trabajando en un proyecto de software y debemos recordar todos los detalles sobre cómo funciona cada parte del código que se está escribiendo. Bueno, esa es la carga cognitiva en acción.<br>
Cuanto más complicado sea el proyecto, más trabajo mental habrá que hacer para mantener todo en orden.</p>
<p>A la hora de programar existen múltiples maneras de disminuir la carga cognitiva que una pieza de código fuente requiere. A mí, en particular, me agradan bastante las sugerencias de <a href="https://franiglesias.github.io/calisthenics-1/" target="_blank"><i lang="en">Object Calisthenics</i></a>.</p>
<h2 id="context-switching" lang="en"><a href="#context-switching">Context Switching</a></h2>
<p>Otro concepto que, a pesar de no tratarse de una ley o principio, puede impactar significativamente en nuestra productividad.</p>
<p><span lang="en">Context switching</span> <b>se refiere al proceso de cambiar nuestra atención y enfoque de una tarea a otra</b>. Este cambio constante de contexto puede ser perjudicial para nuestra productividad, ya que requerimos tiempo y energía para ajustarnos a la nueva tarea.</p>
<p>Y peor aún, aunque la interrupción fuese breve, volver a <a href="https://www.kenneth-truyers.net/2015/10/05/programming-in-the-zone/" target="_blank" hreflang="en"><i lang="en">the zone</i></a> o <a href="https://github.blog/2024-01-22-how-to-get-in-the-flow-while-coding-and-why-its-important/" target="_blank" hreflang="en"><i lang="en">the flow</i></a> puede tomarnos <a href="https://contextkeeper.io/blog/the-real-cost-of-an-interruption-and-context-switching/" target="_blank" hreflang="en">hasta 15 minutos</a>.</p>
<h2 id="ockham"><a href="#ockham">Principio de parsimonia o Navaja de Ockham</a></h2>
<p>El Principio de Parsimonia, también conocido como la Navaja de Ockham, es un principio filosófico que sugiere que, <b>entre varias explicaciones posibles para un fenómeno, la más simple suele ser la correcta</b>. Este principio, propuesto por el filósofo y teólogo Guillermo de Ockham en el siglo XIV, aboga por no multiplicar las entidades innecesariamente.</p>
<p>Entonces, en el mundo del desarrollo de software, esto significa que cuando nos encontramos con un problema a resolver (un bug, una nueva funcionalidad a implementar, un desafío a nivel de arquitectura, etc.), deberíamos intentar encontrar la solución más sencilla posible. En lugar de enredarnos con soluciones complejas que pueden generar más problemas, deberíamos seguir el camino más simple y directo.</p>
<p>Dentro del mundo de la programación, esto se encuentra también muy relacionado con los principios <a href="https://enterprisecraftsmanship.com/posts/yagni-revisited/" target="_blank" hreflang="en"><abbr title="You Aren't Gonna Need It" lang="en">YAGNI</abbr></a> y <a href="https://enterprisecraftsmanship.com/posts/kiss-revisited/" target="_blank" hreflang="en"><abbr title="Keep it Simple, Stupid" lang="en">KISS</abbr></a>.</p>
<h2 id="conway"><a href="#conway">Ley de Conway</a></h2>
<p>La Ley de Conway viene a recordarnos lo importante que es la comunicación en el desarrollo de software, formulada por el programador Melvin Conway en 1968, establece que <b>las organizaciones que diseñan sistemas están inevitablemente limitadas a producir diseños que sean réplicas de la estructura de comunicación de sus propias organizaciones</b>.</p>
<p>He visto muchas veces artículos y explicaciones que se centran en cómo un equipo con poca organización y falta de comunicación producirá software de baja calidad y que, probablemente, no resuelva necesidades reales. Pero a mí me resulta mucho más interesante tener en cuenta esta ley a la hora de diseñar sistemas y definir su arquitectura.</p>
<p>El impacto de la ley de Conway en la arquitectura de software es muy significativo y es algo que he podido comprobar de primera mano. Hace algunos años y en medio del hype por los microservicios, en la empresa donde trabajaba, nos propusimos a, para sorpresa de nadie, migrar a una arquitectura de microservicios. Los beneficios de esta arquitectura son bien conocidos, y entre ellos destacan:</p>
<ol>
<li>Mejor tolerancia a fallos, al facilitar desacoplar los servicios, permitiendo que una pieza de software fallé sin afectar a las demás.</li>
<li>Agnosticismo tecnológico, cada microservicio puede desarrollarse con las tecnologías que considere más apropiadas para lograr su cometido.</li>
<li>Mayor independencia a la hora de evolucionar y desplegar cada servicio al poder hacerlo de manera individual.</li>
<li>Reusabilidad entre áreas de negocio, si partes de la lógica de negocio se repiten entre distintos procesos y áreas, es posible reutilizar los servicios ya desarrollados.</li>
<li>Permite la experimentación y la evolución rápida, al poder ser desarrollados sin comprometer al resto del sistema.</li>
</ol>
<p>Pero nunca llegamos a beneficiarnos de ellos y es que:</p>
<ol>
<li>Nuestras reglas de negocio, aunque bien definidas, eran bastante complejas y la forma en que el equipo las concibe hace que estén fuertemente acopladas entre sí; por lo que, incluso desarrollando diferentes aplicativos, el nivel de dependencia entre ellos impedía una mayor resiliencia ante fallos de un componente.</li>
<li>Todo nuestro equipo tenía experiencia en los mismos lenguajes de programación, por lo que las posibles tecnologías a utilizar eran bastante limitadas.</li>
<li>Al haber dependencias tan fuertes entre las distintas reglas de negocio, cualquier cambio terminaba afectando múltiples componentes.</li>
<li>Nuestras reglas de negocio, aunque complejas, se mantenían dentro de un alcance bastante acotado, por lo que la reutilización de servicios era muy poco probable.</li>
<li>Al tener un equipo conformado, principalmente, por desarrolladores <span lang="en">Junior</span>, la experimentación resultaba casi nula.</li>
</ol>
<p>Y, para empeorar, las cosas, los integrantes del equipo siempre había trabajado de manera muy cercana entre ellos, por lo que no existía un <i lang="en">ownership</i> claro sobre procesos o módulos que permitieran la independencia necesaria para desacoplar las distintas piezas de software. Resultando en que los intentos de separar servicios y comunicarlos solo generara confusión y frustración.</p>
<p>Este es un claro ejemplo de cómo un equipo que tenía la capacidad técnica para desarrollar microservicios falló en hacerlo por razones meramente organizativas y comunicacionales.</p>
<p>Para poder implementar exitosamente una arquitectura de microservicios, primero deberíamos haber comenzado por cambiar la forma en que trabajábamos. Armar múltiples equipos (idealmente uno por microservicio) con un alcance y objetivos claros, capacitar a los desarrolladores en nuevas tecnologías, probablemente contratar más colaboradores, etc.</p>
<p>Por suerte, esta migración fue lanzada como una prueba piloto, y notamos todos estas fricciones antes de que se volvieran un problema.</p>
<p>Así, de común acuerdo con el resto del equipo, decidimos volver al esquema monolítico con el que trabajábamos hasta entonces y centrar nuestros esfuerzos en mejorar la estructura y modularidad de nuestra aplicación, en lugar de intentar separar todo de manera artificial y forzada en distintos servicios independientes.</p>
<h2 id="parkinson"><a href="#parkinson">Ley de Parkinson</a></h2>
<p>En 1957 Cyril Northcote Parkinson enunció: <b>el trabajo se expande hasta llenar el tiempo disponible para que se termine</b>.</p>
<p>Al realizar la gestión de un proyecto, ya sea como colaboradores individuales, estimando tareas que deberán realizarse o realizando planificaciones de alto nivel, como <span lang="en">Project Manager</span>, siempre es buena idea tener en cuenta esta ley.</p>
<p>Según nos advierte, aumentar “por las dudas” el tiempo que se planifica para dedicar a una cierta tarea puede no ser la mejor idea, ya que terminaremos consumiendo ese tiempo en detalles superfluos y probablemente innecesarios (este es un buen punto en el que aplicar el Principio de Pareto para decidir cuando detenerse) en lugar de aprovechar ese tiempo en adelantar otras tareas que puedan aportar un mayor valor real.</p>
<h2 id="brooks"><a href="#brooks">Ley de Brooks</a></h2>
<p>Fred Brooks, en su libro <em lang="en">The Mythical Man-Month</em> publicado en 1975, afirma: <b>añadir más efectivos a un proyecto de software en retraso, lo retrasará más</b>.</p>
<p>Esta es especialmente relevante para los roles de <span lang="en">Management</span> y Liderazgo en proyectos de desarrollo de software, ya que antaño era una práctica muy normal el intentar resolver los problemas de un proyecto mediante la adición de más y más colaboradores.</p>
<p>El problema es que, lejos de de generar resultados más velozmente, se produce el efecto contrario; donde la entrega de valor se retrasa aún más, debido a que la comunicación se complejiza de manera exponencial a medida que se agregan personas y se requiere tiempo adicional para capacitar a estas nuevas incorporaciones y transferirles todo el contexto necesario.</p>
<h2 id="hofstadter"><a href="#hofstadter">Ley de Hofstadter</a></h2>
<p>Esta ley describe la dificultad de estimar el tiempo que llevará completar tareas de gran complejidad acuñada por Douglas Hofstadter en su libro <em lang="en">Gödel, Escher, Bach:  an Eternal Golden Braid</em> afirma: <b>Siempre nos lleva más tiempo de lo esperado, incluso teniendo en cuenta la ley de Hofstadter</b>.</p>
<p>Sobre esta creo que no hay mucho que agregar, pero conocerla es una buena forma de recordar que la estimación de tareas siempre cuenta con su cuota de incertidumbre.</p>
<h2 id="ventanas-rotas"><a href="#ventanas-rotas">Teoría de las ventanas rotas</a></h2>
<p>Esta teoría proviene de la criminología. Introducida en un artículo de 1982 por los científicos sociales James Q. Wilson y George L. Kelling y popularizada en la década de 1990, sostiene que <b>los signos visibles de la delincuencia, el comportamiento antisocial y los disturbios civiles crean un entorno urbano que fomenta la delincuencia y el desorden, incluidos los delitos graves</b>; sugiriendo que los métodos policiales que se centran en atacar los delitos menores, como el vandalismo, la vagancia, el consumo de alcohol en público, el cruce incorrecto de peatones y la evasión de tarifas, ayudan a crear una atmósfera de orden y legalidad.</p>
<p>Esta idea es portada en 1999 al ámbito de la programación por Andy Hunt y Dave Thomas en su libro <em lang="en">The Pragmatic Programmer</em>, donde aplican el concepto de las ventanas rotas a la calidad de software.</p>
<p>En su libro, sugieren nunca dejas las <i>ventanas rotas</i> sin arreglar y repararlas en cuanto se las identifica. Evitando así esparcir malas prácticas al resto del código fuente.</p>
<p>Considero esto particularmente importante cuando un equipo cuenta con una gran cantidad de desarrolladores <span lang="en">Junior</span>, ya que es mediante el mismo código fuente sobre el que están trabajando que, día a día, siguen aprendiendo cómo programar. Sin embargo al ser una práctica que depende en gran medida de la cultura del equipo (y del área o la empresa donde esté trabajando ese equipo) puede ser un desafío notable implementar prácticas que fomenten la reparación constante de estas <i>ventanas rotas</i>.</p>
<h2 id="hanlon"><a href="#hanlon">Principio de Hanlon</a></h2>
<p>El Principio de Hanlon (o navaja de Hanlon) no trata de manera directa sobre productividad pero es una herramienta que puede ayudarnos a lograr mejores resultados cuando se trabaja en conjunto.</p>
<p>Este principio establece: <b>Nunca atribuyas a la maldad lo que se explica adecuadamente por la estupidez</b>.</p>
<p>Me gusta porque es simple y pragmático, y nos invita a darle a las personas el beneficio de la duda. Recordándonos que muchas veces un conflicto que estemos teniendo con otras personas puede ser producto, simplemente, de un malentendido.</p>
<h2>Redondeando</h2>
<p>Esas fueron la leyes, principios y conceptos que, a mi parecer, resultan mas útiles a la hora de participar en un proyecto software.</p>
<p>Espero que les puedan ser de utilidad también a ustedes.</p>
<p>Si quieren charlar sobre este o cualquier otro tema siempre pueden contactarme via <span lang="en">e-mail</span> o dejar un comentario (Me olvidé de avisar eso! Ahora hay una sección de comentarios al final de los <span lang="en">posts</span> 😁).</p>
<p lang="ua">До побаченія!</p>

</article>

				]]></description><pubDate>Thu, 28 Mar 2024 16:57:07 +0000</pubDate><link>https://iyaki.ar/posts/20240328_no_solo_de_software_vive_el_hombre/</link><guid isPermaLink="true">https://iyaki.ar/posts/20240328_no_solo_de_software_vive_el_hombre/</guid></item><item><title><![CDATA[.gitconfig]]></title><description><![CDATA[
					<blockquote>Una de las herramientas más útiles para acompañar una sesión de programación es git, pero también puede ser el mayor enemigo de un programador si no se la usa adecuadamente.<br>En este artículo comparto como configuro git para simplificar su uso lo mas posible.</blockquote>
					<article>
	<h1>.gitconfig</h1>
<p>Continuando con la temática de herramientas y productividad, y envalentonado por el post de <a href="https://jvns.ca/about/#about-me" target="_blank">Julia Evans</a>: <a href="https://jvns.ca/blog/2024/02/16/popular-git-config-options/" target="_blank">Popular git config options</a>, hoy quiero compartir con ustedes mi configuración de git.</p>
<pre><code class="language-toml"># ~/.gitconfig

[user]
    email = ****** # El email que utilizo para github
    name = iyaki # Usuario coincidiendo con el de github
    signingKey = ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFsDjKjz0+2nt9YmqETTLNM9PtxfKP/2ihhcj/q27Mtu # Clave pública correspondiente a la clave privada que utiizo para firmar los commits

[core]
    pager = delta # https://github.com/dandavison/delta Excelente herramienta para mejorar la experiencia al realizar diffs
    editor = vim # https://xkcd.com/378/
    autocrlf = input # \r quien te conoce?
    excludesfile = ~/.gitignore-global # patrones para excluir de manera global
    untrackedcache = true # https://github.blog/2022-06-29-improve-git-monorepo-performance-with-a-file-system-monitor/
    fsmonitor = true # https://github.blog/2022-06-29-improve-git-monorepo-performance-with-a-file-system-monitor/

[color]
    ui = auto # Colorcitos lindos

[help]
    autocorrect = prompt # No hay que dejar que la dislexia nos gane

[diff]
    colorMoved = default # Diferencia (en los diff) lineas movidas de lineas eliminadas y nuevas

[interactive]
    diffFilter = delta --color-only # https://github.com/dandavison/delta
[add.interactive]
    useBuiltin = false # Utilizar delta tambien al ejecutar `git add --interactive` https://git-scm.com/book/en/v2/Git-Tools-Interactive-Staging

[delta] # Mis configuraciones para delta
    navigate = true
    light = false
    line-numbers = true

[gpg]
    format = ssh # Formato de la clave utilizada para firmar commits
[commit]
    gpgsign = true # Firmado automático de los commits
    verbose = true
[tag]
    gpgsign = true # Firmado automático de los tags
[gpg &quot;ssh&quot;]
    allowedSignersFile = ~/.config/git/authorized_signers # Claves publicas consideradas &quot;seguras&quot; para los commits firmados

[init]
    defaultBranch = main # Branch default

[merge]
    conflictstyle = diff3 # Mejor resolución de conflictos durante los merge

[diff]
    tool = difftastic # Herramienta alternativa para hacer diffs &quot;estructurales&quot;. Cuando la conocí me pareció una idea excelente pero la verdad es que despues nunca la usé
[difftool]
    prompt = false
[difftool &quot;difftastic&quot;]
    cmd = difft &quot;$LOCAL&quot; &quot;$REMOTE&quot;

[pager]
    difftool = true # Use a pager for large output, just like other git commands

[alias] # Esto necesita explicación?
    a = add
    b = branch
    c = commit -m
    ca = commit --amend --no-edit
    cl = clean -fd .
    co = checkout
    d = diff
    dd = difftool
    dft = difftool
    l = ! git log --show-signature
    lo = ! git log --color --pretty=format:'%Cred%H%Creset - %C(blue)(%G? %GT)%Creset%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset'
    lol = ! git log --color --graph --pretty=format:'%Cred%h%Creset - %C(blue)(%G? %GT)%Creset%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --
    p = push
    psu = push --set-upstream
    pr = pull --rebase --autostash
    r = reset
    s = status
    td = tag --delete
    tdr = push --delete
</code></pre>
<p>Adicionalmente, esta es mi configuración de exclusiones globales (<code>excludesfile</code>)</p>
<pre><code class="language-.gitignore"># ~/.gitignore-global

.*.sw? #Vim swap file
.directory
.vscode
</code></pre>
<p>Esta era mi configuración de git desde hace ya unos años y hasta hace unos pocos días, cuando, en base al artículo que les compartí al principio del post decidí hacer los siguientes cambios y adiciones:</p>
<pre><code class="language-toml">[merge]
    conflictstyle = zdiff3 # Mejor x2 resolución de conflictos durante los merge

[rerere]
    enabled = true
[push]
    default = current
[rebase]
    autostash = true
[transfer]
    fsckobjects = true
[fetch]
    fsckobjects = true
[receive]
    fsckObjects = true
[status]
    submoduleSummary = true
[branch]
    sort = -committerdate
    sort = tag.sort
[log]
    date = iso
</code></pre>
<p>Estas nuevas configuraciones se ven prometedoras, pero aún no he tenido suficiente tiempo para probarlas a fondo.</p>
<p>Esto es todo por hoy, espero que puedan aprovechar alguna de estas configuraciones para mejorar sus propios flujos de trabajo.</p>
<p lang="ru">Пока́!</p>

</article>
<script type="module">
	import hljs from 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/es/highlight.min.js';
	import bash from 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/es/languages/bash.min.js';
	hljs.registerLanguage('bash', bash);
	hljs.highlightAll()
</script>

				]]></description><pubDate>Sat, 24 Feb 2024 03:37:25 +0000</pubDate><link>https://iyaki.ar/posts/20240224_gitconfig/</link><guid isPermaLink="true">https://iyaki.ar/posts/20240224_gitconfig/</guid></item><item><title><![CDATA[Breaking Changes]]></title><description><![CDATA[
					<blockquote>Algunas lecciones acerca de URIs que me llevo del proceso de migración a eleventy.</blockquote>
					<article>
	<h1 lang="en">Breaking Changes</h1>
<p>Si utilizan <abbr title="Really Simple Sindication" lang="en">RSS</abbr> para seguir los artículos que escribo en mi blog personal, es posible que a fines del 2023 se hayan encontrado con <a href="https://iyaki.ar/posts/20231217_cambios_en_feeds_rss/" target="_blank">este post</a> en el que comento algunos cambios importantes sobre mis feeds <abbr title="Really Simple Sindication" lang="en">RSS</abbr>, que acompañan la migración de mi sitio web a <a href="https://www.11ty.dev/" target="_blank" lang="en" hreflang="en">eleventy</a>.</p>
<p>Hoy vengo a contar un poco sobre como estoy gestionando estos cambios en las <span lang="en">URIs</span> de las distintas páginas de mi <span lang="en">website</span>, siempre con el objetivo de mantener la mayor retrocompatibilidad posible, evitando así <i lang="en">breaking changes</i>.</p>
<p>Al migrar a <span lang="en">eleventy</span> decidí hacer caso a los consejos de <a href="https://www.w3.org/Provider/Style/URI" target="_blank" lang="en">Cool URIs don’t change</a> y eliminar la extensión <code>.html</code> de las <span lang="en">URIs</span> de mis páginas (el cual es ademas el comportamiento predeterminado de <span lang="en">eleventy</span>). Inmediatamente, comencé a buscar una manera de mantener las antiguas <span lang="en">URIs</span> funcionando.</p>
<p>Como soy una persona de bien, que respeta el protocolo <abbr title="HyperText Transfer Protocol" lang="en">HTTP</abbr>, mi primera intención fue configurar redirecciones (<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/301" target="_blank" lang="en" hreflang="en">301 - Moved Permanently</a>) para que todas las direcciones antiguas redirigiesen de forma automática a las nuevas y el cambio en las <span lang="en">URIs</span> fuese explícito y visible para los visitantes de mi web. Esta era la opción más adecuada, pero, al parecer, <a href="https://pages.github.com/" target="_blank" lang="en" hreflang="en">Github Pages</a> (<i lang="en">hosting</i> que utilizo para mi <span lang="en">website</span>) no tiene soporte para configurar redirecciones más allá del clásico <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404" target="_blank" lang="en" hreflang="en">404 - Not Found</a>.</p>
<p>Fue entonces cuando revisando los directorios y archivos de mi sitio descubrí cuál sería la primera solución que implementaría: No hacer nada. ¿Nada? ¡Sí, eso mismo!</p>
<p>El proceso de deploy de este sitio es extremadamente simple, se basa en copiar archivos de un directorio a otro. Y como todos los archivos que <span lang="en">eleventy</span> había generado, tenían rutas distintas a los originales, la primera solución resultó ser seguir sirviendo los antiguos archivos en sus <span lang="en">URIs</span> originales, teniendo así duplicados de muchas de mis páginas.</p>
<p>Esto servía para salir del paso, pero no me terminaba que convencer como solución, ya que, más pronto que tarde, estos duplicados comenzarían a diferir en contenido, generando inconsistencias. Entonces, me embarqué en la búsqueda de una solución más elegante y sostenible, la cual aún no encuentro.</p>
<p>Pero esto no significa que no haya mejorado la solución original.</p>
<p>Actualmente, he cambiado las copias de las páginas por enlaces simbólicos (<i lang="en">symlinks</i>, para los amigos). Los enlaces simbólicos me permiten tener una única versión de cada página, pero mantener accesibles las antiguas <span lang="en">URIs</span>. Esto solo resuelve el problema de la consistencia, ya que el cambio en las <span lang="en">URIs</span> sigue sin hacerse visible para los visitantes. Otro problema que todavía mantiene esta solución es el de la canonicidad de las páginas, al haber múltiples <span lang="en">URIs</span> para un mismo contenido, los motores de búsqueda como <span lang="en">Google</span> no saben cuál deberían sugerir en los resultados porque sus <i lang="en">bots</i> no tienen manera de saber que una de las direcciones corresponde a un enlace simbólico.</p>
<p>Este problema con los motores de búsqueda, de momento, lo estoy resolviendo, incluyendo, en todas las páginas, tags <abbr title="Hyper Text Markup Language">HTML</abbr> del estilo: <code>&lt;link rel=&quot;canonical&quot; href=&quot;https://iyaki.ar/blog/&quot;&gt;</code> lo que, <a href="https://developers.google.com/search/docs/crawling-indexing/consolidate-duplicate-urls?hl=es" target="_blank">según <span lang="en">Google</span></a> debería resolver el problema.</p>
<p>Aún no termino de decidir si eventualmente debería dar de baja las direcciones antiguas de manera definitiva (Opción tentadora para simplificar el mantenimiento, sobre todo teniendo en cuenta que esta web es bastante joven y las posibilidades de que haya enlaces de terceros a sus páginas aún son muy bajos) es por esto que, de manera cautelar, he agregado en la <a href="https://iyaki.ar/404.html" target="_blank">página de 404</a> un script <abbr title="Javascript" lang="en">JS</abbr> del <a href="https://archive.org/" target="_blank" lang="en" hreflang="en">Internet Archive</a> que permite recomendar automáticamente páginas web guardadas con anterioridad en su base de datos en caso de no existir la dirección solicitada.</p>
<p>Además, aprovechando esta posibilidad que me brinda <a href="https://web.archive.org/" target="_blank" lang="en" hreflang="en">WayBack Machine</a> del <span lang="en">Internet Archive</span>, para asegurarme de que mis posts y páginas queden almacenados, en el <span lang="en">Github Action</span> que se encarga de realizar las publicaciones agregué <a href="https://github.com/iyaki/iyaki.github.io/blob/main/.github/workflows/publish.yml#L21" target="_blank">una sección</a> para respaldar automáticamente el contenido de mi sitio web mediante la <abbr title="Application Programming Interface" lang="en">API</abbr> <abbr title="Representational State Transfer" lang="en">REST</abbr> que exponen.</p>
<p>Esto es todo por ahora, si tengo novedades sobre esta migración, sus ventajas y desafíos los verán en mis posts.</p>
<p lang="fr">Au revoir!</p>

</article>

				]]></description><pubDate>Tue, 23 Jan 2024 22:41:44 +0000</pubDate><link>https://iyaki.ar/posts/20240123_breaking_changes/</link><guid isPermaLink="true">https://iyaki.ar/posts/20240123_breaking_changes/</guid></item><item><title><![CDATA[Conoce tus herramientas]]></title><description><![CDATA[
					<blockquote>Si quiero terminar mas rápido ese side project que me va a volver millonario (?) puedo aprender mecanografía y escribir código más rápido o puedo buscar la forma de escribir menos código...</blockquote>
					<article>
	<h1>Conoce tus herramientas</h1>
<p>Este post se centrará sobre una de las formas que considero más importantes para lograr ser productivo, especialmente, como <a href="https://payfit.com/es/contenido-practico/colaborador-individual/" target="_blank">colaborador individual</a>: Conocer nuestras herramientas de trabajo en profundidad.</p>
<p>Los seres humanos contamos con un único recurso universal e inmutable. Nacemos con él y morimos cuando finalmente se nos acaba. A diferencia de otras aptitudes que también podríamos considerar recursos como la fuerza o la inteligencia, las cuales pueden entrenarse para mejorar en el transcurso de nuestras vidas, este recurso en particular no es renovable ni podemos aumentarlo: nuestro tiempo.<br>
Nuestro tiempo es limitado y valioso, por lo que es normal querer asegurarnos de aprovecharlo al máximo. Pero aunque no exista manera de contar con más de 24 horas en un día, sí tenemos el poder de utilizar ese tiempo de manera más eficiente, generando un mayor valor agregado o impacto con el tiempo que dedicamos a ciertos objetivos.</p>
<p>A diferencia de otras áreas o rubros donde una mayor destreza física (por ejemplo, fuerza o velocidad) pueden derivar en una mayor productividad, en <abbr title="Information Technology" lang="en">IT</abbr> este no suele ser el caso. Es verdad que, por ejemplo, practicando mecanografía, un programador puede aumentar la cantidad de líneas de código que escribe por minuto, pero estrategias de este estilo suelen ser mucho menos efectivas que buscar formas de escribir menos código, en lugar de escribir más rápido.<br>
En mi opinión, debemos aspirar más a ser artesanos experimentados que trabajan con precisión y meticulosidad sin dar una sola cincelada de más; en lugar de buscar convertirnos en fábricas de producción masiva.</p>
<p>Es aquí donde entran en juego nuestras herramientas, y el conocerlas para saber cuál se adecúa mejor a cada una de nuestras necesidades y como utilizarlas para aprovecharlas al máximo.</p>
<h2>¿Cuales son nuestras herramientas?</h2>
<p>Todo el <span lang="en">software</span> que utilizamos es parte de nuestra caja de herramientas. Desde el sistema operativo que ejecuta nuestra máquina, hasta el editor de texto o <abbr title="Integrated Ddevelopment Environment" lang="en">IDE</abbr> en el que escribimos nuestro código e incluso los propios compiladores o interpretes de los distintos lenguajes de programación que utilizamos.</p>
<p>También los <i lang="en">frameworks</i> y bibliotecas que utilizamos son parte de nuestra caja de herramientas, y aunque el resto de este post no se centra en ellos, vale la pena mencionar su importancia ya que, conocerlos y entender las posibilidades y facilidades que nos brindan así como sus limitaciones es otra excelente manera de aumentar nuestra productividad a la hora de programar.</p>
<h2>Aspectos esenciales</h2>
<p>A mi entender, hay algunos aspectos transversales a casi todas las herramientas informáticas que resultan claves para aumentar nuestra eficiencia. Estos son:</p>
<ul>
<li>Configuraciones</li>
<li>Atajos de teclado</li>
<li>Respaldos y Sincronización</li>
</ul>
<h3>Configuraciones</h3>
<p>La mayoría del <span lang="en">software</span> dispone de distintas opciones y configuraciones que, dependiendo de nuestras tareas diarias, experiencia y preferencias personales, pueden simplificar nuestro trabajo.</p>
<p>Siempre es recomendable al utilizar una nueva herramienta, dedicar un tiempo a leer su documentación y explorar sus distintas opciones y configuraciones. Esto nos permitirá tener, por lo menos, una idea general sobre las posibilidades que ofrece para poder, a medida que la utilicemos, realizar los ajustes necesarios para poder trabajar de la manera que nos resulte más cómoda, práctica y productiva.</p>
<h3>Atajos de teclado</h3>
<p>Es muy común que los sistemas operativos y programas que utilizamos cuenten con múltiples atajos de teclado para realizar distintas acciones. La cantidad de teclas que podemos combinar para conseguir distintos resultados es realmente inmensa y no tiene ningún sentido intentar memorizar absolutamente todos los atajos de teclado de los que disponemos, pero sí, puede ahorrarnos bastante tiempo el aprender los atajos correspondientes a las acciones que realizamos con más frecuencia.</p>
<h3>Respaldos y sincronización</h3>
<p>La mayoría del <span lang="en">software</span> incluye alguna opción para crear <i lang="en">backups</i>, puntos de restauración o por lo menos realizar exportación de sus configuraciones. Es importante conocer estas opciones y utilizarlas.</p>
<p>Inevitablemente, en algún momento, vamos a romper nuestro ordenador. Pueden ser hoy, mañana o dentro de tres años. Puede ser intentando ajustar configuraciones para que la computadora funcione de manera más fluida, puede ser intentando <i>crackear</i> un juego o puede ser que nuestro gato camine arriba del teclado. Ni el momento ni la razón importan. Lo importante es que va a pasar. Y por eso debemos estar preparados para restaurar nuestro equipo a un estado en el que sea utilizable con la mayor rapidez, posible.</p>
<p>Mejor aún si además de crear estos respaldos tenemos alguna herramienta que nos permita almacenarlos en la nube o incluso sincronizar nuestras configuraciones entre dispositivos.</p>
<h2>Menciones de honor</h2>
<p>A continuación voy a dejar un repaso rápido sobre los aspectos que acabamos de discutir sobre algunas de las herramientas que más utilizo (y, por lo tanto, en las que valor me aporta el aumentar la eficiencia)</p>
<h3>Sistema Operativo</h3>
<p>No creo que nadie se sorprenda de ver el sistema operativo primero en la lista. ¿Es una obviedad que es importante saber usar una computadora? Sí. ¿Me va a volver más productivo por ser un <i lang="en">Power User</i> y conocer cada posible configuración de mi sistema operativo? No.</p>
<p>En el apartado de configuraciones lo que considero más relevante es conocer:</p>
<ol>
<li>La estructura de directorios (carpetas, si son usuarios de <span lang="en">Windows</span>).</li>
<li>Cómo visualizar archivos y directorios ocultos.</li>
<li>Sistema de permisos.</li>
<li><code>PATH</code> (Si van a programar esto es mucho muy importante).</li>
</ol>
<p>Sobre esta base se pueden seguir incorporando otros elementos que ayuden a organizarse mejor como, por ejemplo, el uso de múltiples escritorios o <i lang="en">workspaces</i>.</p>
<p>¿Atajos de teclado? Muchísimos. Solo voy a dejar las listas de atajos de algunos de los sistemas operativos más comunes. Queda a criterio de cada uno decidir cuales les resultaran más útiles.</p>
<ul>
<li><a href="https://support.microsoft.com/es-es/windows/m%C3%A9todos-abreviados-de-teclado-de-windows-dcc61a57-8ff0-cffe-9796-cb9706c75eec" target="_blank">Atajos de teclado <span lang="en">Windows</span></a></li>
<li><a href="https://help.ubuntu.com/stable/ubuntu-help/shell-keyboard-shortcuts.html.es" target="_blank">Atajos de teclado <span lang="za">Ubuntu</span></a></li>
<li><a href="https://docs.kde.org/stable5/es/khelpcenter/fundamentals/kbd.html" target="_blank">Atajos de teclado KDE</a> (Ya sé que no es un sistema operativo como tal, ¿pero a quién le importa?)</li>
<li><a href="https://support.apple.com/es-es/HT201236" target="_blank">Atajos de teclado Mac</a></li>
</ul>
<p>En cuanto a los respaldos, los sistemas operativos suelen incluir alguna solución nativa para realizar respaldos.</p>
<p>Adicionalmente, a mí me gusta utilizar <a href="https://git-scm.com/" lang="en" hreflang="en" target="_blank">git</a> para versionar las configuraciones y documentos más importantes. Es algo bastante simple de realizar en <span lang="en">GNU Linux</span>, pero desconozco que tan efectivo sería esto en <span lang="en">Windows</span>.</p>
<p>Y para mantener backups en la nube yo utilizo el servicio de <a href="https://mega.io/?aff=3oYhIQCzTQc" target="_blank">Mega</a>.</p>
<h3>Terminal (Consola)</h3>
<p>En mi día a día yo suelo utilizar <a href="https://neon.kde.org/" lang="en" hreflang="en" target="_blank">KDE Neon</a>, una distribución de <span lang="en">GNU Linux</span> y, probablemente por costumbre más que por otra razón, mi terminal preferida es <span lang="en">Bash</span>, pero los puntos que voy a mencionar aplican a cualquier otra shell (<span lang="en">Z shell</span>, <span lang="en">Fish shell</span>, etc) o (al menos la mayoría) incluso a consolas de <span lang="en">Windows</span> como <span lang="en">Powershell</span> o el inmortal “cmd” .</p>
<p>Las terminales son herramientas de los más versátiles y sus opciones de configuración son prácticamente infinitas, pero entre todo lo que se puede configurar, personalmente, destaco:</p>
<dl>
<dt>Alias</dt>
<dd>s posible asignar un alias a una comando largo y complicado (incluso con <i lang="en">flags</i> o argumentos predefinidos) para simplificar su uso.</dd>
<dt>Funciones</dt>
<dd>Si un alias se queda corto para simplificar la ejecución de una tarea, siempre podemos definir funciones personalizadas (pequeños programas) que realicen una serie de comandos específicos.</dd>
<dt>Autocompletado</dt>
<dd>Muchas aplicaciones de CLI cuentan automáticamente con autocompletado de argumentos, pero para las que no, es posible definir un script o configuración que permita el autocompletado de forma personalizada.</dd>
</dl>
<pre><code class="language-bash"># git checkout remote
# For usage, execute `gcr` without any argument
function gcr() {
    local REMOTE='origin'

    if [ -z &quot;${1}&quot; ]
    then
        echo &quot;gcr creates a new branch based on an ${REMOTE} branch.
If the branch already exists it is overwritten.

Usage:
    gcr &lt;${REMOTE} base branch&gt; &lt;name-for-new-branch&gt;
Example:
        gcr development new-feature
    will result in the creation of the branch development_new-feature
    tracking ${REMOTE}/development
&quot;
        return
    fi

    git fetch -t -P &quot;${REMOTE}&quot; &amp;&amp;

    local BRANCH_NAME='' &amp;&amp;

    if [ -z &quot;$2&quot; ]
    then
        BRANCH_NAME=&quot;${1}&quot;
    else
        BRANCH_NAME=&quot;${1}_${2}&quot;
    fi &amp;&amp;

    git checkout -t &quot;${REMOTE}/${1}&quot; -B &quot;${BRANCH_NAME}&quot;
}
# gcr bash completion
function __remote_branch_completion() {
    local REMOTE_BRANCHES=&quot;$(__git_remote_heads)&quot;
    COMPREPLY=($(compgen -W &quot;${REMOTE_BRANCHES//'origin/'/}&quot; &quot;${COMP_WORDS[1]}&quot;))
}
complete -F __remote_branch_completion gcr
</code></pre>
<blockquote>
<p>Ejemplo de función bash que simplifica el comando <code>git checkout</code> para crear y cambiar a una nueva rama basada en una rama remota específica y la configuración de su autocompletado.</p>
</blockquote>
<p>Las terminales también cuentan con <a href="https://itsfoss.com/linux-terminal-shortcuts/" hreflang="en" target="_blank">atajos de teclado</a> que pueden resultarnos de los más útiles.</p>
<h3 lang="en">Visual Studio Code</h3>
<p>Otra herramienta con una cantidad enorme de configuraciones y atajos, además de la posibilidad de sincronizar estas entre dispositivos.</p>
<p>En cuanto a sus configuraciones sugiero revisarlas minuciosamente, la manera de hacer esto que a mí me resulta más práctica es:</p>
<ol>
<li>Presionamos la combinación de teclas <code>Ctrl+Shift+p</code> para abrir la barra de comandos.</li>
<li>Escribimos <code>Preferences: Open User Settings (JSON)</code> y pulsamos Enter.
Esto nos abrirá un archivo <abbr title="JavaScript Object Notation">JSON</abbr> donde podemos definir nuestras configuraciones personalizadas.</li>
<li>Comenzaremos agregando: <code>&quot;workbench.settings.useSplitJSON&quot;: true</code>.
Esto nos permitirá ver, a la vez, las configuraciones que nosotros hayamos definido y todas las configuraciones disponibles (incluidas las correspondientes a extensiones) con sus valores por defecto.</li>
</ol>
<p>De este modo, podemos explorar todas las opciones y ajustarlas según nuestras necesidades.</p>
<p>De manera similar con <code>Preferences: Open Keyboard Shortcuts</code> podemos revisar todos los atajos de los que el Visual Studio Code dispone, asi como configurar nuestros propios atajos personalizados.</p>
<h3 lang="en">Git</h3>
<p>Lean la documentación de <span lang="en">git</span>. Sus configuraciones son muchas y de los mas variadas, permite la creación de aliases y personalizar muchos de sus comportamientos con herramientas de terceros como <a href="https://github.com/dandavison/delta" hreflang="en" target="_blank">delta</a></p>
<h2>Próximamente</h2>
<p>Hasta aquí llega el post de hoy. Próximamente espero poder compartir algunas de las configuraciones que mas aprovecho en mi día a día.</p>
<p>¡Hasta pronto!</p>

</article>
<script type="module">
	import hljs from 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/es/highlight.min.js';
	import bash from 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/es/languages/bash.min.js';
	hljs.registerLanguage('bash', bash);
	hljs.highlightAll()
</script>

				]]></description><pubDate>Sun, 21 Jan 2024 20:35:55 +0000</pubDate><link>https://iyaki.ar/posts/20240121_conoce_tus_herramientas/</link><guid isPermaLink="true">https://iyaki.ar/posts/20240121_conoce_tus_herramientas/</guid></item><item><title><![CDATA[Sobre el Governace Crew en esquemas unFIX]]></title><description><![CDATA[
					<blockquote>El modelo unFIX me pareció muy interesante desde la primera vez que leí sobre él pero intentar implementarlo no me fue tan sencillo como esperaba en un primer momento.</blockquote>
					<article>
	<h1>Sobre el <span lang="en">Governace Crew</span> en esquemas <span lang="en">unFIX</span></h1>
<p>Este artículo fue escrito a lo largo de varios meses y mis ideas respecto a
<i lang="en">unFIX</i> han ido mutando durante todo este tiempo. Este post busca reflejar la
transformación que fueron sufriendo esas ideas. Si en algún punto encuentran
inconsistencias o notan que algo se vuelve confuso, por favor háganmelo saber.
Cualquier aporte es más que bienvenido y voy a estar encantado de poder dialogar
sobre este tema. Como siempre pueden contactarme a: <a href="mailto:me@iyaki.ar" target="_blank">me@iyaki.ar</a>.</p>
<h2>Introducción</h2>
<p><a href="https://unfix.com/" lang="en" hreflang="en" target="_blank">UnFIX</a> es un proyecto relativamente nuevo y como tal evoluciona constantemente.
Lo descubrí hace varios meses y desde entonces lo he seguido desde cerca. Sin
embargo, hasta hace poco, y sin que me percatara, estaba ignorando uno de sus
conceptos (en mi opinión) más poderosos.</p>
<p>El objetivo de este artículo no es brindar una introducción al modelo, sino
ahondar en algunos de sus aspectos, por lo que si no están familiarizados con
<i lang="en">unFIX</i> les recomiendo estos dos excelentes artículos introductorios de Javier
Garzas:</p>
<ul>
<li><a href="https://www.javiergarzas.com/2023/02/unfix-innovador-modelo-de-escalado-o-un-refrito-gourmet-parte-i.html" target="_blank">Innovador modelo de escalado o un refrito <span en="en">gourmet</span> parte I</a>.</li>
<li><a href="https://www.javiergarzas.com/2023/02/unfix-2a-parte-innovador-modelo-de-escalado-o-un-refrito-gourmet-de-antiguos-patrones.html" target="_blank">Innovador modelo de escalado o un refrito <span en="en">gourmet</span> parte II</a>.</li>
</ul>
<p>O bien, que vayan al <a href="https://unfix.com/blog/the-unfix-model" hreflang="en" target="_blank">primer post del blog de <i lang="en">unFIX</i></a>
o a su <a href="https://unfix.com/what-is-unfix" hreflang="en" target="_blank">explicación “oficial”</a> y luego sigan
recorriendo las distintas secciones del website.</p>
<h2>Mi motivación</h2>
<p>Actualmente, trabajo como director del área de Producto y Tecnología de una
empresa enfocada en proveer un <abbr title="Software as a Service" lang="en">SaaS</abbr> dirigido a la industria de la salud. Es por
esto que siempre me encuentro buscando nuevas formas de mejorar los procesos y
la organización para ser más eficientes. Y en ese sentido, desde el comienzo,
<i lang="en">unFIX</i> me pareció una forma innovadora de organizar el equipo de personas que
trabaja conmigo.</p>
<p>Las responsabilidades de mi rol incluyen todo lo relativo al diseño, desarrollo
y mantenimiento de nuestro <abbr title="Software as a Service" lang="en">SaaS</abbr>, así como los temas relacionados con <abbr title="Recursos Humanos">RR.HH.</abbr> del
plantel del área de Producto, evaluaciones de desempeño, <i lang="en">coaching</i> o
acompañamiento en el desarrollo profesional.</p>
<p>Cuanto más leía respecto al modelo <i lang="en">unFIX</i> más convencido me encontraba de que
podía aportarnos valor y ayudarnos a seguir creciendo.</p>
<p>Aunque algunos de sus conceptos podían aplicarse de manera aislada dentro del
área de Producto, estaba convencido de que el mayor valor que tenía para aportar
se encontraba en la implementación del modelo en toda la compañía. Pero al
intentar convertir toda la empresa al modelo <i lang="en">unFIX</i> siempre había un aspecto que
no podía terminar de acomodar: El <i lang="en">management</i>.</p>
<p>Este es un organigrama aproximado del esquema de trabajo que manejamos
actualmente (que probablemente sea vea similar al 90% de los organigramas de
cualquier empresa pequeña o mediana).</p>
<figure>
	<img src="https://iyaki.ar/posts/20231210_sobre_el_governance_crew/organigrama.webp" alt="Organigrama previo a aplicar el modelo unFIX">
	<figcaption>Estructura básica del organigrama previo a aplicar el modelo <i lang="en">unFIX</i></figcaption>
</figure>
<p>Lo más natural (al menos para mí), en una primera aproximación, fue pensar una
migración al modelo <i lang="en">unFIX</i> de la siguiente manera:</p>
<figure>
	<img src="https://iyaki.ar/posts/20231210_sobre_el_governance_crew/base_unfix.webp" alt="Primer intento de aplicar el modelo unFIX">
	<figcaption>Estructura básica luego de un primer acercamiento al modelo <i lang="en">unFIX</i></figcaption>
</figure>
<p>En esta migración, tanto los puestos <i lang="en">C-Level</i>, como los de dirección, pasan a
conformar el <a href="https://unfix.com/governance-crew" lang="en" hreflang="en" target="_blank">Governance Crew</a>.</p>
<p>Y hasta acá todo parecía funcionar. Sobre el papel, las piezas encajan. Todo
puede ser modelado según las reglas de <i lang="en">unFIX</i>. Pero aún sentía que había algunos
puntos que definir antes de poder implementar este nuevo esquema. Principalmente
en lo que respecta al <i lang="en">management</i>. Suena tentador (por lo fácil que sería)
mantener la separación de responsabilidades dentro del personal que forma el
<i lang="en">Governance Crew</i> igual que hasta ahora. Pero también se siente poco natural al
observar el nuevo “organigrama” y ver que no existen separaciones fuertes de
cara al resto de los Crews respecto a las responsabilidades de cada uno de los
integrantes del <i lang="en">Governance Crew</i>.</p>
<p><i lang="en">UnFIX</i> propone algunos lineamientos en cuanto a como debería funcionar el
<i lang="en">management</i>, un resumen de estos lineamientos sería:</p>
<ol>
<li>El trabajo de “gestionar gente” solo puede ser realizado por aquellos con el
rol de <a href="https://unfix.com/chief" lang="en" hreflang="en" target="_blank">Chief</a>.</li>
<li>Solo los <i lang="en">Chief</i> pueden ser <a href="https://in.indeed.com/career-advice/finding-a-job/what-does-people-manager-do" lang="en" hreflang="en" target="_blank">People managers</a>
de otras personas.</li>
<li>Los <i lang="en">Chief</i> únicamente pueden reportar ante otros <i lang="en">Chief</i>.</li>
<li>Los <i lang="en">Chief</i> son, en última instancia, responsables por todo lo que ocurra en
la <a href="https://unfix.com/base-types" lang="en" hreflang="en" target="_blank">Base</a>.</li>
<li>El rol de <i lang="en">Chief</i> solo existe dentro del <i lang="en">Governance Crew</i>.</li>
<li>El <i lang="en">Governance Crew</i> suele estar compuesto por múltiples <i lang="en">Chief</i>.</li>
<li>El <i lang="en">Governance Crew</i> es el encargado de asegurar la motivación del resto de
las personas.</li>
<li>El <i lang="en">Governance Crew</i> es el responsable del negocio frente a los
<i lang="en">stakeholders</i> externos.</li>
<li>El <i lang="en">Governance Crew</i> define el propósito de la <i lang="en">Base</i>.</li>
<li>Existe un único <i lang="en">Governance Crew</i> por <i lang="en">Base</i>.</li>
</ol>
<p>Son buenos lineamientos pero muy generales. Por lo que, me dispuse a agregar
algunas reglas más para “ordenar” un poco el equipo en nuestro caso particular.</p>
<p>Así comencé a pensar distintas maneras de separar las responsabilidades de los
integrantes del <i lang="en">Governance Crew</i>. Y llegué a múltiples opciones, algunas de
ellas fueron:</p>
<ul>
<li>Gobernanza por Perfil: Definir un <i lang="en">Chief</i> en el <i lang="en">Governance Crew</i> por cada área o
función específica dentro de la organización, como por ejemplo, un <i lang="en">Chief</i> de
<i lang="en">Marketing</i>, un <i lang="en">Chief</i> de Recursos Humanos, etc.</li>
<li>Gobernanza por <a href="https://unfix.com/value-streams" lang="en" hreflang="en" target="_blank">Value Stream</a>: Separar las responsabilidades del Governance
Crew según los diferentes flujos de valor de la organización, lo que
implicaría tener un <i lang="en">Chief</i> encargado de cada uno de ellos, como por ejemplo,
un <i lang="en">Chief</i> del proceso de producción, un <i lang="en">Chief</i> del proceso de ventas, etc.</li>
<li>Gobernanza por <a href="https://unfix.com/investment-horizons" target="_blank">Investment Horizon</a>:
Dividir las responsabilidades del <i lang="en">Governance Crew</i> según los diferentes
<i lang="en">Investment Horizon</i> en los que se enfoca la organización.</li>
<li>Gobernanza por entropía: Tirar dados para decidir como separar las
responsabilidades de los miembros del <i lang="en">Governance Crew</i>. Aunque es la opción
menos seria de todas las que pude pensar, finalmente me pareció igual de
arbitraria que cualquiera de las anteriores.</li>
</ul>
<p>Además, al reflexionar en como sería un día normal de trabajo con cualquiera de
estas nuevas estructuras, no puedo evitar sentir una sensación de inconformidad
al profundizar en algunos detalles.</p>
<p>Cuanto más intentaba encontrar una respuesta que me satisficiera, más me
alejaba de las opciones de gobernanza que había pensado, y es que en múltiples
artículos del <a href="https://unfix.com/blog" hreflang="en" target="_blank">blog de <i lang="en">unFIX</i></a>
(<a href="https://unfix.com/blog/manage-the-system" lang="en" hreflang="en" target="_blank">Manage the System, Lead the People</a>,
<a href="https://unfix.com/blog/agile-and-aligned" lang="en" hreflang="en" target="_blank">How Do We Keep the Business Agile and Aligned?</a>,
<a href="https://unfix.com/blog/middle-managers-should-stop-coordinating" lang="en" hreflang="en" target="_blank">Middle Managers Should Stop Coordinating</a>
) y algunos <a href="https://youtu.be/6IRQWT-kxXs" hreflang="en" target="_blank">recursos externos</a> quedaba bastante
claro que el enfoque que estaba dando al trabajo que debía realizar el
<i lang="en">Governance Crew</i> era incorrecto y gran parte de las responsabilidades de
dirección que hoy cubro no tenían lugar en el <i lang="en">Governance Crew</i>.</p>
<h2>El problema</h2>
<p>Mi trabajo ya no existía.</p>
<p>O mejor dicho, para seguir las directivas del modelo <i lang="en">unFIX</i> mi puesto de
<a href="https://en.wikipedia.org/wiki/Middle_management" lang="en" hreflang="en"  target="_blank">Middle Management</a> no debía
existir.</p>
<p>En una primera instancia darme cuenta de esto fue un <i lang="en">shock</i> importante. También
fue el punto en que dejé este artículo sin terminar durante bastante tiempo y
pensé en abandonar mi proyecto de implantación del modelo <i lang="en">unFIX</i> en mi trabajo.<br>
Pero a media que pasaron los días y las semanas, al seguir dándole vueltas al
asunto, y buscando más información sobre el tema, finalmente, todas las
piezas encajaron.</p>
<h2>La revelación</h2>
<p>Aunque mi puesto no pudiese existir como lo había hecho hasta ahora, eso no
tenía por qué cambiar mi rol o responsabilidades como individuo. Y es que <i lang="en">unFIX</i>
contempla la posibilidad de participar en
<a href="https://unfix.com/blog/the-multiteaming-way" hreflang="en" target="_blank">múltiples equipos a la vez</a>, así
como distintos <a href="https://unfix.com/participation-levels" lang="en" hreflang="en" target="_blank">Participation Levels</a>,
<a href="https://unfix.com/blog/no-more-fixed-jobs" lang="en" hreflang="en" target="_blank">Time commitments</a> y la existencia de
<a href="https://unfix.com/facilitation-crew" lang="en" hreflang="en" target="_blank">Facilitation crews</a>. Mis responsabilidades
y todo lo que disfruto de mi trabajo seguían ahí, pero ya no englobadas en
un único puesto.</p>
<p>Esto permite tomar decisiones sobre la base y su funcionamiento, como parte de
los miembros del <i lang="en">Governance Crew</i>, pero también seguir participando en el
<i lang="en">coaching</i> de otros colaboradores como parte de un <i lang="en">Facilitation Crew</i> o colaborar
en distintos equipos y proyectos de manera más flexible.</p>
<p>La posibilidad de participar en múltiples equipos es, en mi opinión, una de las
características más interesantes y liberadoras del modelo <i lang="en">unFIX</i>. Y una de
las que más lo diferencia de la mayoría de los <i lang="en">frameworks Agile</i> que prohíben
esta práctica y buscan equipos lo más estables posible. Es cierto que esta
estabilidad tiene sus ventajas, pero dependiendo de factores como el tamaño de
la organización o la velocidad a la que cambian los objetivos puede no ser la
opción más beneficiosa.</p>
<h2>¿Conclusión?</h2>
<p>Actualmente, estamos trabajando en adaptar nuestra organización interna a un
modelo más fluido y fuertemente influenciado por las propuestas de <i lang="en">unFIX</i>, pero
es una labor que apenas estamos comenzando, por lo que hoy no podría brindar una
conclusión sobre las ventajas, desventajas o desafíos que esto nos presente.
Espero tener noticias al respecto pronto para poder compartirlas.</p>

</article>

				]]></description><pubDate>Sun, 10 Dec 2023 20:21:38 +0000</pubDate><link>https://iyaki.ar/posts/20231210_sobre_el_governance_crew/</link><guid isPermaLink="true">https://iyaki.ar/posts/20231210_sobre_el_governance_crew/</guid></item><item><title><![CDATA[Migrando ando]]></title><description><![CDATA[
					<blockquote>Puede que sea un poco apresurado, pero creo que me volví a enamorar.</blockquote>
					<article>
	<h1>Migrando ando</h1>
<p>Hace varias semanas que quiero hacer algunos cambios en mi página web, quiero
experimentar con algunos conceptos interesantes que he conocido recientemente
como <a href="https://indieweb.org/" target="_blank" lang="en" hreflang="en">IndieWeb</a> o embellecer más el diseño.</p>
<p>Pero cada vez que pensaba en hacerlo me desalentaba el tedioso trabajo que
significaba tener que editar cada página a mano, porque sí, hasta ahora todas
las páginas de mi sitio web estaban escritas a mano en archivos individuales sin
ningún tipo de componentes o posibilidad de reutilizar código.<br>
Cuando comencé con este proyecto de tener un sitio web (blog incluido) esto era
algo de lo que me enorgullecía (tal como menciono en <a href="https://iyaki.ar/"" target="_blank">mi página principal</a>).
Pero, si bien, en un principio la opción de “buscar y reemplazar” de mi editor
de texto era suficiente a medida que la cantidad de páginas crecía, empezó a
parecerme cada vez menos escalable.</p>
<p>Ciertamente con solo 14 páginas publicadas, entre índices, <i title="Landing page" lang="en">landings</i> y <i lang="en">posts</i>, aún
era completamente manejable con “buscar y reemplazar” (y alguna eventual <abbr title="Expresión regular">regex</abbr>)
pero aun pudiendo estar pecando de optimización prematura decidí migrar a alguna
herramienta que me permitiera reutilizar componentes y escribir menos código
cada vez que quería publicar un post.</p>
<p>Y luego de investigar un poco, la herramienta que ganó mi atención (y aunque aún
es pronto para decirlo, puede que también mi corazón) fue:
<a href="https://www.11ty.dev/" target="_blank" lang="en" hreflang="en">Eleventy</a>.</p>
<p>Es un generador de sitios estáticos tan simple que no deja de sorprenderme todo
lo que facilita mi flujo de trabajo. Los partidarios de <i lang="en">React</i> dirán que hay
que aprender un nuevo lenguaje para poder utilizarlo, que <i lang="en">JSX</i> es mejor porque es
un lenguaje que uno ya maneja (<span lang="en">Javascript, <i>kinda…</i></span>) y tienen razón. Hay que
aprender un lenguaje nuevo, pero no importa. La <abbr title="Application Programming Interface" lang="en">API</abbr> de
<a href="https://liquidjs.com/index.html" target="_blank" lang="en" hreflang="en">LiquidJS</a> (el motor de templates que Eleventy
<a href="https://www.11ty.dev/docs/languages/html/" target="_blank" hreflang="en">asigna por defecto a archivos .html</a>)
es tan pequeña que se puede aprender y usar en unos pocos minutos sin ningún
problema.</p>
<p>Si les interesa como va quedando la migración pueden echarle un ojo al
<a href="https://github.com/iyaki/iyaki.github.io/" target="_blank">repositorio de esta web</a> en <span lang="en">Github</span>.</p>
<p>De momento a lo que más provecho le estoy sacando es a los
<a href="https://www.11ty.dev/docs/layouts/" target="_blank" hreflang="en">layouts</a> e <a href="https://www.11ty.dev/docs/languages/liquid/#quoted-include-paths&gt;" target="_blank" hreflang="en">include</a> (Nota: según la
<a href="https://liquidjs.com/tags/include.html" target="_blank" hreflang="en">documentación de LiquidJS</a> el uso de
<em>include</em> se encuentra obsoleto y debe preferirse <em>render</em>) que resuelven el
principal problema que tenía al escribir todos los archivos <abbr title="Hyper Text Markup Language">HTML</abbr> por separado,
sin posibilidad de compartir contenido.</p>
<p>También las <a href="https://www.11ty.dev/docs/collections/" target="_blank" hreflang="en">collections</a> me están
resultando de lo más útiles y han resultado ser una excelente herramienta para
simplificar bastante la <a href="https://github.com/iyaki/iyaki.github.io/tree/main/poster" target="_blank">herramienta que había desarrollado en <abbr title="Javascript">JS</abbr> para publicar mis posts</a>.
O para mejorar el armado automático del sitemap.</p>
<p>Aún faltan algunos detalles por pulir como el armado de los <span lang="en">feeds <abbr title="Really Simple Sindication">RSS</abbr></span> a partir
de collections o resolver como adecuar mi
<a href="https://iyaki.ar/curated/" target="_blank">Recopilador de contenido curado</a> para poder seguir
alimentándolo de manera automática a partir del contenido que cargo en
<a href="https://iyaki.notion.site/iyaki/066daa9a7abb4c029724323209c85ca6?v=0a0294da7e734adcb9e4e5413c1db1da" target="_blank">mi Notion</a>. Y tengo bastantes expectativas por
descubrir como puede ayudarme a mejorar la gestión de recursos <span lang="en">Javascript</span> o <abbr title="Cascading Style Sheets" lang="en">CSS</abbr>
o explorar algunos de sus Plugins.</p>
<p>En cuanto tenga novedades las estaré compartiendo por este medio, mi blog.</p>
<p lang="ja">Matane!</p>

</article>

				]]></description><pubDate>Mon, 27 Nov 2023 00:51:13 +0000</pubDate><link>https://iyaki.ar/posts/20231127_migrando_ando/</link><guid isPermaLink="true">https://iyaki.ar/posts/20231127_migrando_ando/</guid></item><item><title><![CDATA[El desafío del lenguaje ubicuo en español]]></title><description><![CDATA[
					<blockquote>¿El inglés como lenguaje universal? No dentro de mis dominios.</blockquote>
					<article>
	<h1>El desafío del lenguaje ubicuo en español</h1>
	<p lang="ja">Hisashiburi dana!</p>
	<p>
		Creo que nunca lo llegué a escribir esto en un post anterior, pero, cuando monté
		esté blog, mi intención era escribir, por lo menos, un artículo al mes.
	</p>
	<p>
		Como podrán notar si revisar las fechas en el <a href="https://iyaki.ar/"blog" target="_blank">índice del blog</a>, durante septiembre no publiqué nada.
	</p>
	<p>
		Estoy participando en varios proyectos y se me presentaron nuevos desafíos también en mi trabajo “formal” que me motivan mucho, pero también consumen más tiempo de lo habitual, pero pienso que ya conseguí acomodar mi agenda para poder seguir escribiendo (y disfrutando de hacerlo).
	</p>
	<p>Sin más novedades, doy paso al tema del artículo de hoy.</p>
	<p>😃</p>
	<p>
		La programación y el idioma inglés están fuertemente relacionados. No solo la mayoría de recursos de calidad (documentación, tutoriales y guías, por ejemplo) suelen estar escritas en inglés, sino que los propios lenguajes de programación y bibliotecas suelen exponerse al programador en inglés. Es cierto que existen algunas excepciones (como <a href="https://www.lenguajelatino.org/" target="_blank">Lenguaje Latino</a>), pero son realmente muy pocas y su uso no se encuentra extendido ni es realmente viable para el desarrollo de <a href="https://en.wikipedia.org/wiki/Enterprise_software" target="_blank" lang="en" hreflang="en">Enterprise software</a>.
	</p>
	<p>
		Es por esto que muchas organizaciones optan por adoptar la política o convención de escribir absolutamente todo el código fuente de sus software en inglés.
	</p>
	<p>
		Esta es, en principio, una buena idea para que el código fuente sea lo más coherente y homogéneo posible y evitar potenciales discusiones irrelevantes entre colaboradores por detalles del empleo del lenguaje.
	</p>
	<p>
		Sin embargo, cuando se siguen los lineamientos de <i lang="en">Domain Driven Design</i> para programar, el empleo del lenguaje deja de ser una discusión irrelevante, ya que este tipo de discusiones son las que dan lugar al descubrimiento del lenguaje ubicuo del dominio de nuestro software.
	</p>
	<p>
		Entonces, ¿qué hacer cuando el lenguaje ubicuo de nuestro dominio está basado en idiomas distintos del inglés?
	</p>
	<p>Yo, no lo sé.</p>
	<p>
		Existen algunos casos en que, es posible adaptar o traducir todos los términos del dominio, pero, en mi experiencia, tarde o temprano, surgen palabras que no poseen una traducción literal o peor aún, conceptos que no existen en otros idiomas por ser propios del modelo de negocio y país en el que se está trabajando (hecho recurrente si el software debe cubrir regulaciones o normativas específicas).
	</p>
	<p>
		En estos casos, es importante buscar soluciones que permitan adaptar el lenguaje ubicuo a la realidad del equipo de desarrollo.
	</p>
	<p>
		Esto, en algunos casos, puede significar simplemente aceptar el <i><a href="https://es.wikipedia.org/wiki/Espanglish" target="_blank">spanglish</a></i> en nuestro código fuente.
	</p>
	<p>
		Para equipos o proyectos pequeños puede no ser necesario definir ningún tipo de convenciones al respecto, pero, en equipos con gran cantidad de gente involucrada o proyectos de gran duración, puede ser deseable definir algunos lineamientos.
	</p>
	<p>
		En estos casos, personalmente, me inclino por aceptar el uso de términos en inglés para toda la jerga de índole técnica o sobre la que existan convenciones ya existentes dentro de la comunidad de programadores.
	</p>
	<p>Los ejemplos más obvios podrían ser términos como:</p>
	<ul lang="en">
		<li>Interface</li>
		<li>Abstract</li>
		<li>Request</li>
		<li>Response</li>
		<li>Auth</li>
		<li>Factory</li>
		<li>Value Object</li>
		<li>Repository</li>
		<li>Exception</li>
	</ul>
	<p>
		Pero también creo prudente incluir términos como <i lang="en">get</i> y <i lang="en">find</i> por <a href="https://tuhrig.de/find-vs-get/" target="_blank">existir convenciones respecto a su utilización</a>.
	</p>
	<p>
		Otro punto en el que considero relevante tener cierta flexibilidad es en la aceptación de terminología “común” para satisfacer la <a href="https://es.wikipedia.org/wiki/Econom%C3%ADa_ling%C3%BC%C3%ADstica" target="_blank">economía del lenguaje</a>. Porque si bien es verdad que <em lang="en">get</em> y <em lang="en">find</em> podrían traducirse como <em>obtener</em> y <em>buscar</em>, las versiones en inglés son más cortas, un caso similar podría ser el preferir <em lang="en" title="average">avg</em> por sobre <em>promedio</em>, y no tengo dudas de que si uno se sienta a pensar encontrará muchos otros ejemplos similares.
	</p>
	<p>
		El empleo del lenguaje ubicuo fuera del inglés me parece de lo más desafiante, por desgracia no he encontrado muchos recursos o guías específicas sobre cómo abordar esta situación ni he podido llegar a una conclusión firme sobre como resolverlo.
	</p>
	<p>
		De hecho, al investigar un poco el tema en internet, antes de escribir este artículo, lo único que encontré fue <a href="http://www.javahispano.org/java-se/post/2468151" target="_blank">esta pregunta sin respuestas</a> realizada en el año 2015 en un foro de Java.
	</p>
	<p>
		Si alguien conoce algún otro método para abordar estas situaciones, ha desarrollado convenciones al respecto o tiene opiniones formadas sobre el tema, voy a estar encantado de leerlos y poder intercambiar ideas sobre este desafío que enfrentamos como programadores.
	</p>
</article>

				]]></description><pubDate>Wed, 11 Oct 2023 03:00:00 +0000</pubDate><link>https://iyaki.ar/posts/20231011_el_desafio_del_lenguaje_ubicuo_en_espanol/</link><guid isPermaLink="true">https://iyaki.ar/posts/20231011_el_desafio_del_lenguaje_ubicuo_en_espanol/</guid></item><item><title><![CDATA[Los atributos id en HTML como parte de la API pública de las páginas web]]></title><description><![CDATA[
					<blockquote>Desde que el ser humano adquirió el raciocinio suficiente para entender el paso del tiempo siempre le han agradado las cosas predecibles. Los programadores seguimos siendo seres humanos, y nos siguen gustando las cosas predecibles. Sobre todo las API predecibles.<br> ¿Y que hay mas predecible que una API que no cambia? <br><br> Sin embargo, es fácil olvidar lo poco que se requiere para que una API cambie.</blockquote>
					<article>
	<h1>Los atributos id en HTML como parte de la API pública de las páginas web</h1>
	<p>
		Va a ser un tanto desafiante escribir el epígrafe de este artículo. Ustedes leen el epígrafe, inmediatamente después
		del título, pero antes del contenido del artículo; y es lo natural, ya que se encuentran visibles en la página
		principal de mi blog.
	</p>
	<p>
		Sin embargo, debido a mi <a href="https://github.com/iyaki/iyaki.github.io/tree/main/poster" target="_blank">proceso
			de publicación</a>, yo los agrego después de haber terminado de escribir el contenido del artículo.
	</p>
	<p>
		Lo particular, en esta ocasión, es que, el título es bastante explícito. Podría terminar este post ahora mismo y,
		probablemente, solo con el título sería suficiente para que muchos sepan a qué me estoy refiriendo. Por lo que,
		ahora mismo, no se me ocurre epígrafe alguno que no resulte redundante o aburrido.
	</p>
	<h2>¿API pública de las páginas web?</h2>
	<p>
		Dejando de lado la cuestión del epígrafe, voy a comenzar explicando a que me refiero por <strong><abbr
				title="Application Programming Interface" lang="en">API</abbr> pública de las páginas web</strong>. Y para esto,
		primero, voy a ahondar, brevemente, en a que <strong>no</strong> me estoy refiriendo al hablar de <abbr
			title="Application Programming Interface" lang="en">API</abbr>.
	</p>
	<p>
		A efectos de este artículo, <abbr title="Application Programming Interface" lang="en">API</abbr> no está funcionando
		como sinónimo de “servicio web que recibe y responde <abbr title="JavaScript Object Notation" lang="en">JSON</abbr>
		(Deliberadamente no voy a emplear el término <abbr title="Representational State Transfer" lang="en">REST</abbr>
		para evitar entrar en <a href="https://htmx.org/essays/how-did-rest-come-to-mean-the-opposite-of-rest/"
			target="_blank" hreflang="en">debates</a>), ni de “<abbr title="Remote Procedure Call" lang="en">RPC</abbr> sobre
		<abbr title="HyperText Transfer Protocol" lang="en">HTTP</abbr>. Tampoco me refiero a la <abbr
			title="Application Programming Interface" lang="en">API</abbr> de un <abbr title="Software Development Kit"
			lang="en">SDK</abbr> o <i lang="en">framework</i>.
	</p>
	<p>
		Esta vez, utilizaremos el concepto más genérico que hay de <abbr title="Application Programming Interface"
			lang="en">API</abbr>, es decir, la interfaz que utilizan 2 piezas de software para comunicarse.
	</p>
	<p>
		Armados con esta definición, procederemos a considerar el <abbr title="Uniform Resource Identifier"
			lang="en">URI</abbr> de una página web como su principal <abbr title="Application Programming Interface"
			lang="en">API</abbr>, ya que es la forma que tiene de que los navegadores web accedan a ella. Bien porque un
		usuario escribe un <abbr title="Uniform Resource Identifier" lang="en">URI</abbr> en la barra de navegación o bien
		porque es redirigido desde otra página web mediante el uso de <a href="https://es.wikipedia.org/wiki/Hiperenlace"
			target="_blank">hipervínculos</a> (<abbr title="also known as" lang="en">a.k.a.</abbr> <i lang="en">links</i>).
	</p>
	<h2>Conociendo un poco mejor los URI</h2>
	<p>
		Los <abbr title="Uniform Resource Identifier" lang="en">URI</abbr>, o <a
			href="https://es.wikipedia.org/wiki/Identificador_de_recursos_uniforme" target="_blank">Identificadores de
			Recursos Uniformes</a>, son cadenas de texto que identifican un recurso (en este caso, una página web) en la <a
			href="https://es.wikipedia.org/wiki/World_Wide_Web" target="_blank">web</a>.
	</p>
	<p>
		Se conforman de múltiples partes, siendo una de ellas (y en la que nos centraremos) el <em>fragmento</em>.
	</p>
	<figure>
		<img src="https://iyaki.ar/posts/20230827_api_paginas_web/URI_syntax_diagram_es.png" alt="Diagrama de las partes de un URI">
		<figcaption>Partes de un <abbr title="Uniform Resource Identifier" lang="en">URI</abbr></figcaption>
	</figure>
	<p>
		En un <abbr title="Uniform Resource Identifier" lang="en">URI</abbr>, el fragmento es la parte que sigue al signo de
		numeral (#) y su función es identificar una sección especifica dentro de la página web.
	</p>
	<p>
		Es lo que los navegadores utilizan, junto con los hipervínculos, para “saltar” (y también “deslizarse”, gracias a la
		continua evolución de <abbr title="Cascading Style Sheets" lang="en">CSS</abbr> y la propiedad <em><a
				href="https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior" target="_blank" lang="en"
				hreflang="en">scroll-behavior</a></em>) a una sección dentro de una misma página web (No confundir con
		hipervínculos que llevan a otra <a href="https://es.wikipedia.org/wiki/P%C3%A1gina_web" target="_blank">página</a>
		dentro del mismo <a href="https://es.wikipedia.org/wiki/Sitio_web" target="_blank">sitio web</a>).
	</p>
	<p>
		Es un comportamiento que todo hemos visto y usado alguna vez al navegar por la web, pero cuyo funcionamiento interno
		es fácil ignorar o pasar por alto mientras desarrollamos páginas web.
	</p>
	<h2>¿Y los atributos id que pintan en todo esto?</h2>
	<p>
		El mecanismo que emplean los navegadores para brindar esta funcionalidad de navegar entre secciones es
		extremadamente simple y ubicuo. Cuando creamos una página web, tenemos la opción de asignar identificadores únicos a
		elementos específicos mediante el atributo <em lang="en">id</em>.
	</p>
	<p>
		El simple hecho de agregarle un atributo id a un elemento automáticamente lo convierte en un punto de referencia
		dentro del <abbr title="Uniform Resource Identifier" lang="en">URI</abbr> de la página web y le permite a los
		navegadores implementar su funcionalidad de “salto entre secciones”.
	</p>
	<h2>Algunas conclusiones</h2>
	<p>
		Sabiendo que los atributos id de los elementos <abbr title="Hyper Text Markup Language" lang="en">HTML</abbr>
		cumplen un rol especial para los navegadores web; se me ocurren dos corolarios, en forma de consejos a tener en
		cuneta a la hora de desarrollar páginas web.
	</p>
	<p>
		El primero sería evitar el uso del atributo id para otros fines, cómo podría ser el agregado de estilos mediante
		<abbr title="Cascading Style Sheets" lang="en">CSS</abbr>. Extendiendo esta idea, y alineados con las directivas de
		<a href="https://www.freecodecamp.org/news/semantic-html5-elements/" target="_blank" hreflang="en">HTML
			semántico</a>, podríamos considerar que el atributo id debe ser agregado únicamente en elementos que representan
		secciones importantes o puntos de referencia dentro de una página, o por los menos, los encabezados de estas
		secciones.
	</p>
	<p>
		El segundo está relacionado con el versionado de <abbr title="Application Programming Interface"
			lang="en">API</abbr> y es que sí, los atributos id de nuestro <abbr title="Hyper Text Markup Language"
			lang="en">HTML</abbr> forman parte de la <abbr title="Application Programming Interface" lang="en">API</abbr> de
		nuestra página web, eso significa que eliminar un id, representa un cambio retroincompatible en la <abbr
			title="Application Programming Interface" lang="en">API</abbr> de nuestra web. Y como es sabido <a
			href="https://www.w3.org/Provider/Style/URI" target="_blank" lang="en">Cool URIs don’t change</a>.
	</p>
	<p>
		Esto es todo por hoy, estimadísimos lectores. <i lang="it">Ci vediamo.</i>
	</p>
</article>

				]]></description><pubDate>Sun, 27 Aug 2023 03:00:00 +0000</pubDate><link>https://iyaki.ar/posts/20230827_api_paginas_web/</link><guid isPermaLink="true">https://iyaki.ar/posts/20230827_api_paginas_web/</guid></item><item><title><![CDATA[Bibliotecas y librerías]]></title><description><![CDATA[
					<blockquote>Una breve anécdota de un suceso irrelevante que ocurrió hace años y que, por razones que no termino de comprender, podría, o no, haber marcado mi uso del lenguaje.</blockquote>
					<article>
	<h1>Bibliotecas y librerías</h1>
	<p>
		Hoy vengo a contar un breve e irrelevante anécdota sobre algo que sucedió, hace varios años, mientras cursaba
		<em>Arquitectura de Computadoras</em>.
		<br>
		De alguna manera, nuestro profesor; un hombre mayor de unos 65 años, empedernido peronista, con tendencias
		trotskistas y la voz más áspera que el tabaco puede producir, mencionó las <a
			href="https://es.wikipedia.org/wiki/Biblioteca_(inform%C3%A1tica)" target="_blank">bibliotecas</a> como
		herramienta para compartir información entre distintos programas (refiriéndose a los <a
			href="https://es.wikipedia.org/wiki/Biblioteca_de_enlace_din%C3%A1mico" target="_blank"
			title="Dynamic-link library" lang="en">.dll</a> y <a
			href="https://en.wikipedia.org/wiki/Library_(computing)#Shared_libraries" target="_blank" title="Shared Object"
			lang="en" hreflang="en">.so</a>). No tengo muy claro cómo llego a entrar en ese tema, ya que las clases se basaban
		principalmente en diseñar circuitos lógicos. Supongo que el no haber estado prestando demasiada atención tampoco
		ayudó.
	</p>
	<p>
		Sin embargo, el cómo llegó nuestro profesor al tema no es lo que quiero compartirles. Lo interesante (si es que el
		suceso que voy a describir puede calificarse de este modo) es lo que ocurrió inmediatamente después.
	</p>
	<p>
		Alguno de mis compañeros decidió hacer una pregunta al respecto, pero, al formularla, decidió utilizar el término
		librería en lugar de biblioteca. Y esto, que podría parecer un simple error a la hora de traducir la palabra inglesa
		<i lang="en">Library</i>, propiciado por la <a
			href="https://daily.jstor.org/friend-or-faux-the-linguistic-trickery-of-false-friends/" target="_blank"
			title="False friends" hreflang="en">similitud gramática y fonética de ambas palabras</a>, o un inocente abuso del
		lenguaje, despertó una inesperada cólera en nuestro profesor que, durante la próxima media hora de clase, se dedicó
		a explicar fervientemente la diferencia conceptual entre ambos términos; apuntando a que múltiples intereses
		buscaban lograr que algo de dominio público como lo son las bibliotecas y cuyos contenidos se encuentran abiertos a
		la comunidad sin mayores restricciones se convirtiera en una herramienta de negocio controlada por empresas privadas
		generando ganancias por algo que históricamente fue de libre acceso, llegando incluso a mencionar el <a
			href="https://redinformativa.org.ar/el-plan-atlanta/" target="_blank">Plan Atlanta</a> como parte de su discurso.
		(Aclaración importante: dejando de lado las analogías, el discurso siempre se centró en el ámbito del software. En
		cuanto a este artículo concierne, no hay nadie con intereses de convertir las bibliotecas públicas en librerías
		privadas).
	</p>
	<p>
		En el momento no le di mayor importancia a esta diferencia conceptual entre los términos y seguí con mi vida. Años
		después, sigo sin darle mayor importancia a esa diferencia, sin embargo, ese incidente sigue presente en mi memoria.
	</p>
	<p>
		Me parece ridícula, o cuando menos irrelevante, la idea de que existe un grupo de personas dedicado a privatizar el
		software libre minando las bases mismas del lenguaje (y todo esto únicamente en español); y aun así cada vez que
		hablo de manera consciente sobre alguna <i lang="en">Library</i> con un compañero de trabajo elijo usar la palabra
		<em>biblioteca</em> a pesar de que, al menos en los círculos en los que me muevo, se encuentra mucho más extendido
		el uso del término <em>librería</em>.
	</p>
	<p>
		¿Por qué será?
	</p>
</article>

				]]></description><pubDate>Sun, 16 Jul 2023 03:00:00 +0000</pubDate><link>https://iyaki.ar/posts/20230716_bibliotecas_y_librerias/</link><guid isPermaLink="true">https://iyaki.ar/posts/20230716_bibliotecas_y_librerias/</guid></item></channel></rss>